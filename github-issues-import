Title,Body,Labels
"Organize PRD, architecture diagrams, and wireframes in /docs",Phase 0 — Foundation & Environment,"phase0,docs,planning"
Create GitHub repo + branch conventions,Phase 0 — Foundation & Environment,"phase0,repo,planning"
Configure local + containerized dev environment (Docker Compose),Phase 0 — Foundation & Environment,"phase0,backend,devops"
"Set up CI/CD with linting, tests, security scans",Phase 0 — Foundation & Environment,"phase0,devops,testing"
Provision Postgres (pgvector enabled) + Redis (Streams enabled),Phase 0 — Foundation & Environment,"phase0,backend,database"
Select and provision secret manager (Vault/SSM),Phase 0 — Foundation & Environment,"phase0,security,devops"
"Define initial RBAC roles (admin, operator, viewer)",Phase 0 — Foundation & Environment,"phase0,security,backend"
"Implement core DB schema: workflows, runs, steps, messages, artifacts, kb_documents, kb_chunks, mcp_servers",Phase 1 — Core Backend,"phase1,backend,database"
Add Alembic migrations,Phase 1 — Core Backend,"phase1,backend,database"
"Build FastAPI app scaffold (routes, middleware, auth stubs)",Phase 1 — Core Backend,"phase1,backend,api"
Implement JWT auth + RBAC middleware,Phase 1 — Core Backend,"phase1,backend,security"
"CRUD for workflows, runs, KB docs, MCP servers",Phase 1 — Core Backend,"phase1,backend,api"
Redis Streams orchestration queue + worker skeleton,Phase 1 — Core Backend,"phase1,backend,queue"
Structured logging + error handling,Phase 1 — Core Backend,"phase1,backend,logging"
Unit tests for models/services (≥ 80% coverage),Phase 1 — Core Backend,"phase1,backend,testing"
File ingest pipeline: upload → chunk → embed → store in pgvector,Phase 2 — Knowledge Base (RAG),"phase2,backend,rag"
Hybrid search (BM25 + vector) endpoint,Phase 2 — Knowledge Base (RAG),"phase2,backend,rag"
KB CRUD + metadata filters,Phase 2 — Knowledge Base (RAG),"phase2,backend,rag"
Simple retrieval evaluation tool (top-k preview),Phase 2 — Knowledge Base (RAG),"phase2,backend,rag"
"Tests for ingestion, search, and filtering",Phase 2 — Knowledge Base (RAG),"phase2,backend,testing"
"Graph model: node types, ports, edges, validation",Phase 3 — Workflow Orchestration,"phase3,backend,workflow"
"Execution engine: step runner, retries, budget enforcement",Phase 3 — Workflow Orchestration,"phase3,backend,workflow"
Step schema validation (Pydantic) for inputs/outputs,Phase 3 — Workflow Orchestration,"phase3,backend,validation"
"Run lifecycle management (start, cancel, replay step)",Phase 3 — Workflow Orchestration,"phase3,backend,workflow"
Audit logging for all tool calls,Phase 3 — Workflow Orchestration,"phase3,backend,logging"
Unit/integration tests for run execution paths,Phase 3 — Workflow Orchestration,"phase3,backend,testing"
MCP server registry + capability metadata,Phase 4 — MCP Integration,"phase4,backend,mcp"
Tool allowlist + approval level enforcement,Phase 4 — MCP Integration,"phase4,backend,security"
MCP call executor with schema validation,Phase 4 — MCP Integration,"phase4,backend,mcp"
Approval request/decision endpoints,Phase 4 — MCP Integration,"phase4,backend,api"
Tests for approval gating + MCP call flows,Phase 4 — MCP Integration,"phase4,backend,testing"
"App scaffold (Next.js 14, TS, Tailwind, React Flow, Yjs)",Phase 5 — Frontend,"phase5,frontend,ui"
"Auth flow (login, logout, role-based UI)",Phase 5 — Frontend,"phase5,frontend,security"
"Canvas: node palette, drag-drop, properties panel, validation highlights",Phase 5 — Frontend,"phase5,frontend,workflow"
"Run Viewer: steps timeline, details, replay, diff",Phase 5 — Frontend,"phase5,frontend,workflow"
"KB management UI: upload, search, preview",Phase 5 — Frontend,"phase5,frontend,rag"
"Approval UI: request, view, decide",Phase 5 — Frontend,"phase5,frontend,workflow"
Component/unit tests (React Testing Library) + E2E (Playwright),Phase 5 — Frontend,"phase5,frontend,testing"
Notion: create/update pages for runs/artifacts,Phase 6 — Integrations,"phase6,backend,integration"
N8N: webhook for run events (idempotent),Phase 6 — Integrations,"phase6,backend,integration"
Config screens for external integrations,Phase 6 — Integrations,"phase6,frontend,integration"
Tests for integration flows + error handling,Phase 6 — Integrations,"phase6,backend,testing"
Per-run/user budgets (tokens + cost) with fail-closed enforcement,Phase 7 — Guardrails & Observability,"phase7,backend,security"
Prompt-injection sanitization rules,Phase 7 — Guardrails & Observability,"phase7,backend,security"
"Metrics: Prometheus (runs_started, step_latency, error_rate, spend)",Phase 7 — Guardrails & Observability,"phase7,backend,observability"
Tracing: OpenTelemetry spans per step,Phase 7 — Guardrails & Observability,"phase7,backend,observability"
"Dashboards: run success %, queue depth, spend by workflow",Phase 7 — Guardrails & Observability,"phase7,frontend,observability"
Load tests for concurrent runs,Phase 7 — Guardrails & Observability,"phase7,backend,testing"
SSL/TLS setup + nginx reverse proxy,Phase 8 — Production Readiness,"phase8,devops,security"
Backup + restore procedures for Postgres,Phase 8 — Production Readiness,"phase8,devops,database"
"Monitoring alerts for queue depth, error rate, spend",Phase 8 — Production Readiness,"phase8,backend,observability"
UAT with target workflows,Phase 8 — Production Readiness,"phase8,testing,uat"
Security review + penetration test,Phase 8 — Production Readiness,"phase8,security,testing"
Final documentation (user + admin guides),Phase 8 — Production Readiness,"phase8,docs,planning"
